# Autentizační služba

Umožňuje autorizovat operace prováděné přes API GoPay.

## Aplikační token

Aplikační token je vytvořen na základě předávaných přístupových údajů ve formě ```<ClientID>```:```<ClientSecret>```.
Token je předáván jako autorizační parametr v hlavičce HTTP dotazu prostřednictvím ```Authorization: Bearer <accessToken>```.

Získaný přístupový token je předáván pro každý další požadavek na API.

<aside class="notice">
  Pokud ještě nemáte ClientID a ClientSecret, <a href="mailto:integrace@gopay.cz?subject=GoPay - žádost o aplikační údaje"><font color="black">kontaktujte nás</font></a>.
</aside>

<h5>Request</h5>

```GET /api/login/app```

> Request

<%= partial "includes/examples", :locals => { :example => data.example.token.request } %>

<h5>Hlavička požadavku</h5>
Název parametru|Popis parametru|Povinný
---------------|---------------|-------
Authorization|[HTTP basic authentication](http://cs.wikipedia.org/wiki/Basic_access_authentication) pomocí níž předáváte ```<ClientID>```:```<ClientSecret>```|ANO

> Response

<%= partial "includes/examples", :locals => { :example => data.example.token.response } %>

<h5>Response</h5>

Název parametru|Popis parametru|Povinný
---------------|---------------|-------
accessToken|Přístupový token|ANO



## Consent token

Připojením získá ```Odběratel identity``` možnost číst identifikační data ```Klienta```.

Access (consent) token zároveň reprezentuje souhlas Klienta s předáváním identifikačních údajů Odběratelem identity.

K připojení využíváme <b>OAuth 2.0</b>, konkrétně průchod Authorization Code Grant.

### Získání

<b>Připojení uživatelského profilu</b>

Cílem připojení uživatelského profilu je získání access/refresh tokenu, který bude následně využíván Odběratelem identity k dotazování Identifikační služby.

<br>

<b>1) Přesměrování Klienta na autentizační službu</b>

Odběratel identity přesměrovává Klienta na autentizační službu pro získání ```access tokenu```.

<%= partial "includes/examples", :locals => { :example => data.example.a_redirect_gopay.request } %>

V rámci ```GET``` parametrů se předává:

Název parametru|Popis parametru|
---------------|---------------|
scopes| perm.client.identification (oblast přístupu o kterou Odběratel identity žádá)
state| Párovací identifikátor (je předáván jako query parametr redirect_url)
client_id| Identifikátor aplikace Odběratele identity
redirect_uri| URL na něž bude Klient vrácen po udělení souhlasu Odběrateli identity

<br>

<b>2) Přesměrování Klienta na URL Odběralete identity</b>

Klient po provedení registrace, případně přihlášení, udělí ```consent``` a je přesměrován zpět na ```redirect_uri```.

<%= partial "includes/examples", :locals => { :example => data.example.b_redirect_merchant.request } %>

V redirectu předáváme parametry:

Název parametru|Popis parametru|
---------------|---------------|
code| Autorizační kód pro získání access tokenu, životnost 10 minut
state| Párovací identifikátor

<br>

<b>3) Získání consentu Klienta</b>

Pro získání ```access tokenu``` (consentu / souhlasu Klienta) provede Odběratel identity volání níže.

Pro opětovné získání čerstvého `access tokenu` je nutné použít postup [obnovy](#obnova) consent tokenu.

<h5>Request</h5>

```POST /api/token```

> Request

<%= partial "includes/examples", :locals => { :example => data.example.consent_token.request } %>

<h5>Tělo požadavku</h5>

Název parametru|Popis parametru|Povinný
---------------|---------------|-------
authorization_code| Dočasný autorizační kód|ANO
client_id| client_credentials|ANO
client_secret| client_credentials|ANO

> Response

<%= partial "includes/examples", :locals => { :example => data.example.consent_token.response } %>

<h5>Response</h5>

Název parametru|Popis parametru|Datový typ
---------------|---------------|-----------
accessToken| Přístupový token, aktivní po dobu 60 minut|string
refreshToken| Slouží pro získání nového access tokenu|string

### Obnova

`Access token` má omezenu životnost na dobu 60 minut. Pro opětovné získání čerstvého
access tokenu je nutné použít postup, viz níže.

`Refresh token` je nutné držet relaci na `Klienta`. Je nutné zajistit jeho bezpečné uložení.
Pro snížení pravděpodobnosti úniku využíváme výměnu refresh tokenu při každém obnovení.

<h5>Request</h5>

```POST /api/token```

> Request

<%= partial "includes/examples", :locals => { :example => data.example.refresh_token.request } %>

<h5>Tělo požadavku</h5>

Název parametru|Popis parametru|Datový typ
---------------|---------------|-----------
client_id| client_credentials|integer
client_secret| client_credentials|string
grant_type| Typ požadavku| string
refresh_token| Refresh token| string

> Response

<%= partial "includes/examples", :locals => { :example => data.example.refresh_token.response } %>

<h5>Response</h5>

Název parametru|Popis parametru|Datový typ
---------------|---------------|-----------
accessToken| Přístupový token, aktivní po dobu 60 minut.|string
refreshToken| Slouží pro získání nového access tokenu. POZOR - refreshToken se mění s každým voláním.|string

### Revokace

Pomocí revokace tokenu provede `Odběratel identity` odpojení identifikačního profilu.

<h5>Request</h5>

```POST /api/revoke```

> Request

<%= partial "includes/examples", :locals => { :example => data.example.revoke_token.request } %>

<h5>Tělo požadavku</h5>

Název parametru|Popis parametru|Datový typ
---------------|---------------|-----------
client_id| client_credentials|integer
client_secret| client_credentials|string
token| Refresh token| string